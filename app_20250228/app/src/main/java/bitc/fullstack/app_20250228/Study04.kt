package bitc.fullstack.app_20250228

//  람다 함수 : 코틀린에서 제공하는 익명함수 선언 기법
//  람다식을 사용하여 기존 함수의 선언보다 간소화하여 함수를 선언할 수 있음
//  선언한 람다 함수를 변수에 저장하여 변수명으로 해당 함수를 호출하여 사용

//  사용법
//  val 변수명 = {매개변수 -> 실행소스} // 선언
//  변수명(매개변수) // 호출


//  일반적인 함수의 선언
fun sum1(no1: Int, no2: Int): Int {
  return no1 + no2
}

//  람다 함수 선언
//  호출 시 일반함수와 동일함
val sum2 = {no1: Int, no2: Int -> no1 + no2}


//  일반적인 매개변수가 있는 람다 함수
val ptr1 = {str: String -> println("출력할 문자 : $str")}

//  매개변수가 없는 람다 함수
val ptr2 = { -> println("출력할 문자 : 안녕하세요")}

//  매개변수가 없는 람다 함수 다른 방식, 매개변수가 없으면 '->' 도 생략 가능
val ptr3 = {println("출력할 문자 : 안녕~")}


//  매개변수가 1개인 람다 함수
val ptr4 = {no: Int -> println("매개변수가 1개인 람다함수 : $no")}

//  매개변수가 1개인 람다함수 다른 방식, 데이터 타입이 무엇인지 확인할 수 있을 경우 사용
//  매개 변수 선언 시 '변수명: 데이터타입' 의 데이터 타입 부분에 (데이터타입) -> Unit 형태를 사용하여 해당 변수의 타입이 함수 타입임을 알려줌
//  it : 매개변수가 1개인 람다 함수 사용 시 매개변수의 데이터를 가져오기 키워드
val ptr5: (Int) -> Unit = {println(it)}


//  람다 함수 선언 시 여러 줄의 소스코드를 입력해도 상관없음
//  람다 함수에서 마지막 라인의 연산 결과가 데이터이면 해당 데이터를 return 함
val ptr6 = {no1: Int, no2: Int -> no1 + no2}
val ptr7 = {
  no1: Int, no2: Int ->
  println("람다 함수 안에서 동작")
  println("아래의 내용은 반환됨")
  no1 + no2
}

fun main() {
  println("----- 람다함수 사용하기 -----\n")

//  일반 함수를 사용하여 데이터 연산
  var result = sum1(10, 20)
  println("(일반함수) 두 수의 합 : $result")

  result = sum2(10, 20)
  println("(람다함수) 두 수의 합 : $result")

  println("----- 람다함수를 선언과 동시에 호출 -----")

//  선언한 람다 함수 뒤에 (매개변수) 를 사용하면 선언과 동시에 호출됨
  println({no1: Int, no2: Int -> no1 + no2}(10, 20))

  println("\n----- 람다 함수 호출 -----")
  ptr1("헬로 월드!!")

  println("\n----- 매개변수가 없는 람다 함수 -----")
  ptr2()
  ptr3()

  println("\n----- 매개변수가 1개인 람다 함수 -----")
  ptr4(100)
  ptr5(100)

  println("\n----- 반환값을 사용하는 람다 함수 -----")
  result = ptr6(10, 20)
  println("한줄 실행형 람다함수의 반환값 : $result")
  result = ptr7(10, 20)
  println("여러줄 실행형 람다함수의 반환값 : $result")
}












